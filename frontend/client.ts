// Code generated by the Encore 1.50.4 client generator. DO NOT EDIT.

// Disable eslint, jshint, and jslint for this file.
/* eslint-disable */
/* jshint ignore:start */
/*jslint-disable*/
import type { CookieWithOptions } from "encore.dev/api";

/**
 * BaseURL is the base URL for calling the Encore application's API.
 */
export type BaseURL = string

export const Local: BaseURL = "http://localhost:4000"

/**
 * Environment returns a BaseURL for calling the cloud environment with the given name.
 */
export function Environment(name: string): BaseURL {
    return `https://${name}-.encr.app`
}

/**
 * PreviewEnv returns a BaseURL for calling the preview environment with the given PR number.
 */
export function PreviewEnv(pr: number | string): BaseURL {
    return Environment(`pr${pr}`)
}

const BROWSER = typeof globalThis === "object" && ("window" in globalThis);

/**
 * Client is an API client for the  Encore application.
 */
export class Client {
    public readonly admin: admin.ServiceClient
    public readonly auth: auth.ServiceClient
    public readonly crm: crm.ServiceClient
    public readonly ideas: ideas.ServiceClient
    public readonly lms: lms.ServiceClient
    public readonly style_guides: style_guides.ServiceClient
    public readonly uploads: uploads.ServiceClient
    public readonly website: website.ServiceClient
    private readonly options: ClientOptions
    private readonly target: string


    /**
     * Creates a Client for calling the public and authenticated APIs of your Encore application.
     *
     * @param target  The target which the client should be configured to use. See Local and Environment for options.
     * @param options Options for the client
     */
    constructor(target: BaseURL, options?: ClientOptions) {
        this.target = target
        this.options = options ?? {}
        const base = new BaseClient(this.target, this.options)
        this.admin = new admin.ServiceClient(base)
        this.auth = new auth.ServiceClient(base)
        this.crm = new crm.ServiceClient(base)
        this.ideas = new ideas.ServiceClient(base)
        this.lms = new lms.ServiceClient(base)
        this.style_guides = new style_guides.ServiceClient(base)
        this.uploads = new uploads.ServiceClient(base)
        this.website = new website.ServiceClient(base)
    }

    /**
     * Creates a new Encore client with the given client options set.
     *
     * @param options Client options to set. They are merged with existing options.
     **/
    public with(options: ClientOptions): Client {
        return new Client(this.target, {
            ...this.options,
            ...options,
        })
    }
}

/**
 * ClientOptions allows you to override any default behaviour within the generated Encore client.
 */
export interface ClientOptions {
    /**
     * By default the client will use the inbuilt fetch function for making the API requests.
     * however you can override it with your own implementation here if you want to run custom
     * code on each API request made or response received.
     */
    fetcher?: Fetcher

    /** Default RequestInit to be used for the client */
    requestInit?: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createBlogPost as api_admin_content_createBlogPost,
    createPricingItem as api_admin_content_createPricingItem,
    createProject as api_admin_content_createProject,
    deleteBlogPost as api_admin_content_deleteBlogPost,
    deletePricingItem as api_admin_content_deletePricingItem,
    deleteProject as api_admin_content_deleteProject,
    getBlogPost as api_admin_content_getBlogPost,
    getPricingItem as api_admin_content_getPricingItem,
    getProject as api_admin_content_getProject,
    listBlogPosts as api_admin_content_listBlogPosts,
    listPricingItems as api_admin_content_listPricingItems,
    listProjects as api_admin_content_listProjects,
    updateBlogPost as api_admin_content_updateBlogPost,
    updatePricingItem as api_admin_content_updatePricingItem,
    updateProject as api_admin_content_updateProject
} from "~backend/admin/content";
import { getDashboard as api_admin_dashboard_getDashboard } from "~backend/admin/dashboard";

export namespace admin {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createBlogPost = this.createBlogPost.bind(this)
            this.createPricingItem = this.createPricingItem.bind(this)
            this.createProject = this.createProject.bind(this)
            this.deleteBlogPost = this.deleteBlogPost.bind(this)
            this.deletePricingItem = this.deletePricingItem.bind(this)
            this.deleteProject = this.deleteProject.bind(this)
            this.getBlogPost = this.getBlogPost.bind(this)
            this.getDashboard = this.getDashboard.bind(this)
            this.getPricingItem = this.getPricingItem.bind(this)
            this.getProject = this.getProject.bind(this)
            this.listBlogPosts = this.listBlogPosts.bind(this)
            this.listPricingItems = this.listPricingItems.bind(this)
            this.listProjects = this.listProjects.bind(this)
            this.updateBlogPost = this.updateBlogPost.bind(this)
            this.updatePricingItem = this.updatePricingItem.bind(this)
            this.updateProject = this.updateProject.bind(this)
        }

        /**
         * Creates a new blog post.
         */
        public async createBlogPost(params: RequestType<typeof api_admin_content_createBlogPost>): Promise<ResponseType<typeof api_admin_content_createBlogPost>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/blog`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_createBlogPost>
        }

        /**
         * Creates a new pricing item.
         */
        public async createPricingItem(params: RequestType<typeof api_admin_content_createPricingItem>): Promise<ResponseType<typeof api_admin_content_createPricingItem>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/pricing`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_createPricingItem>
        }

        /**
         * Creates a new portfolio project.
         */
        public async createProject(params: RequestType<typeof api_admin_content_createProject>): Promise<ResponseType<typeof api_admin_content_createProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/projects`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_createProject>
        }

        /**
         * Deletes a blog post.
         */
        public async deleteBlogPost(params: { id: number }): Promise<ResponseType<typeof api_admin_content_deleteBlogPost>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/blog/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_deleteBlogPost>
        }

        /**
         * Deletes a pricing item.
         */
        public async deletePricingItem(params: { id: number }): Promise<ResponseType<typeof api_admin_content_deletePricingItem>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/pricing/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_deletePricingItem>
        }

        /**
         * Deletes a project.
         */
        public async deleteProject(params: { id: number }): Promise<ResponseType<typeof api_admin_content_deleteProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/projects/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_deleteProject>
        }

        /**
         * Get a single blog post by ID.
         */
        public async getBlogPost(params: { id: number }): Promise<ResponseType<typeof api_admin_content_getBlogPost>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/blog/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_getBlogPost>
        }

        /**
         * Retrieves dashboard overview data for admin users.
         */
        public async getDashboard(): Promise<ResponseType<typeof api_admin_dashboard_getDashboard>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/dashboard`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_dashboard_getDashboard>
        }

        /**
         * Get a single pricing item by ID.
         */
        public async getPricingItem(params: { id: number }): Promise<ResponseType<typeof api_admin_content_getPricingItem>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/pricing/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_getPricingItem>
        }

        /**
         * Get a single project by ID.
         */
        public async getProject(params: { id: number }): Promise<ResponseType<typeof api_admin_content_getProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/projects/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_getProject>
        }

        /**
         * List all blog posts for admin management.
         */
        public async listBlogPosts(params: RequestType<typeof api_admin_content_listBlogPosts>): Promise<ResponseType<typeof api_admin_content_listBlogPosts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                source: params.source,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/blog`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_listBlogPosts>
        }

        /**
         * List all pricing items for admin management.
         */
        public async listPricingItems(): Promise<ResponseType<typeof api_admin_content_listPricingItems>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/pricing`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_listPricingItems>
        }

        /**
         * List all projects for admin management.
         */
        public async listProjects(): Promise<ResponseType<typeof api_admin_content_listProjects>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/projects`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_listProjects>
        }

        /**
         * Updates an existing blog post.
         */
        public async updateBlogPost(params: RequestType<typeof api_admin_content_updateBlogPost>): Promise<ResponseType<typeof api_admin_content_updateBlogPost>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                body:          params.body,
                coverImageUrl: params.coverImageUrl,
                excerpt:       params.excerpt,
                gallery:       params.gallery,
                ideaId:        params.ideaId,
                scheduledAt:   params.scheduledAt,
                slug:          params.slug,
                source:        params.source,
                status:        params.status,
                subtitle:      params.subtitle,
                title:         params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/blog/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_updateBlogPost>
        }

        /**
         * Updates an existing pricing item.
         */
        public async updatePricingItem(params: RequestType<typeof api_admin_content_updatePricingItem>): Promise<ResponseType<typeof api_admin_content_updatePricingItem>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                description: params.description,
                features:    params.features,
                imageUrl:    params.imageUrl,
                isFeatured:  params.isFeatured,
                price:       params.price,
                sortOrder:   params.sortOrder,
                title:       params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/pricing/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_updatePricingItem>
        }

        /**
         * Updates an existing project.
         */
        public async updateProject(params: RequestType<typeof api_admin_content_updateProject>): Promise<ResponseType<typeof api_admin_content_updateProject>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                coverImageUrl: params.coverImageUrl,
                description:   params.description,
                externalUrl:   params.externalUrl,
                gallery:       params.gallery,
                isFeatured:    params.isFeatured,
                sortOrder:     params.sortOrder,
                title:         params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/admin/projects/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_admin_content_updateProject>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import { login as api_auth_login_login } from "~backend/auth/login";
import { register as api_auth_register_register } from "~backend/auth/register";

export namespace auth {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.login = this.login.bind(this)
            this.register = this.register.bind(this)
        }

        /**
         * Authenticates a user and returns a session token.
         */
        public async login(params: RequestType<typeof api_auth_login_login>): Promise<ResponseType<typeof api_auth_login_login>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/login`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_login_login>
        }

        /**
         * Registers a new user account.
         */
        public async register(params: RequestType<typeof api_auth_register_register>): Promise<ResponseType<typeof api_auth_register_register>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/auth/register`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_auth_register_register>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    createContact as api_crm_contacts_createContact,
    deleteContact as api_crm_contacts_deleteContact,
    getContact as api_crm_contacts_getContact,
    listContacts as api_crm_contacts_listContacts,
    updateContact as api_crm_contacts_updateContact
} from "~backend/crm/contacts";
import {
    createContext as api_crm_contexts_createContext,
    listContexts as api_crm_contexts_listContexts,
    updateContext as api_crm_contexts_updateContext
} from "~backend/crm/contexts";

export namespace crm {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.createContact = this.createContact.bind(this)
            this.createContext = this.createContext.bind(this)
            this.deleteContact = this.deleteContact.bind(this)
            this.getContact = this.getContact.bind(this)
            this.listContacts = this.listContacts.bind(this)
            this.listContexts = this.listContexts.bind(this)
            this.updateContact = this.updateContact.bind(this)
            this.updateContext = this.updateContext.bind(this)
        }

        /**
         * Create a new contact
         */
        public async createContact(params: RequestType<typeof api_crm_contacts_createContact>): Promise<ResponseType<typeof api_crm_contacts_createContact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contacts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contacts_createContact>
        }

        /**
         * Create a new context
         */
        public async createContext(params: RequestType<typeof api_crm_contexts_createContext>): Promise<ResponseType<typeof api_crm_contexts_createContext>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contexts`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contexts_createContext>
        }

        /**
         * Delete a contact
         */
        public async deleteContact(params: { id: number }): Promise<ResponseType<typeof api_crm_contacts_deleteContact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contacts/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contacts_deleteContact>
        }

        /**
         * Get a single contact by ID
         */
        public async getContact(params: { id: number }): Promise<ResponseType<typeof api_crm_contacts_getContact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contacts/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contacts_getContact>
        }

        /**
         * List contacts with filtering
         */
        public async listContacts(params: RequestType<typeof api_crm_contacts_listContacts>): Promise<ResponseType<typeof api_crm_contacts_listContacts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                companyId: params.companyId === undefined ? undefined : String(params.companyId),
                contextId: params.contextId === undefined ? undefined : String(params.contextId),
                limit:     params.limit === undefined ? undefined : String(params.limit),
                offset:    params.offset === undefined ? undefined : String(params.offset),
                search:    params.search,
                status:    params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contacts`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contacts_listContacts>
        }

        /**
         * List all contexts
         */
        public async listContexts(): Promise<ResponseType<typeof api_crm_contexts_listContexts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contexts`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contexts_listContexts>
        }

        /**
         * Update a contact
         */
        public async updateContact(params: RequestType<typeof api_crm_contacts_updateContact>): Promise<ResponseType<typeof api_crm_contacts_updateContact>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                address:     params.address,
                birthday:    params.birthday,
                city:        params.city,
                companyId:   params.companyId,
                contextId:   params.contextId,
                country:     params.country,
                email:       params.email,
                firstName:   params.firstName,
                lastName:    params.lastName,
                linkedinUrl: params.linkedinUrl,
                mobile:      params.mobile,
                phone:       params.phone,
                postalCode:  params.postalCode,
                source:      params.source,
                state:       params.state,
                status:      params.status,
                tags:        params.tags,
                title:       params.title,
                twitterUrl:  params.twitterUrl,
                website:     params.website,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contacts/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contacts_updateContact>
        }

        /**
         * Update a context
         */
        public async updateContext(params: RequestType<typeof api_crm_contexts_updateContext>): Promise<ResponseType<typeof api_crm_contexts_updateContext>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                color:       params.color,
                description: params.description,
                isActive:    params.isActive,
                name:        params.name,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/crm/contexts/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_crm_contexts_updateContext>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    approveDraft as api_ideas_drafts_approveDraft,
    listDrafts as api_ideas_drafts_listDrafts
} from "~backend/ideas/drafts";
import {
    createFeedSource as api_ideas_feeds_createFeedSource,
    deleteFeedSource as api_ideas_feeds_deleteFeedSource,
    listFeedSources as api_ideas_feeds_listFeedSources,
    scrapeFeedSource as api_ideas_feeds_scrapeFeedSource,
    updateFeedSource as api_ideas_feeds_updateFeedSource
} from "~backend/ideas/feeds";
import { ingestIdea as api_ideas_ingest_ingestIdea } from "~backend/ideas/ingest";
import {
    approveIdea as api_ideas_manage_approveIdea,
    cancelScheduledPost as api_ideas_manage_cancelScheduledPost,
    getIdeaPlatforms as api_ideas_manage_getIdeaPlatforms,
    listIdeas as api_ideas_manage_listIdeas,
    listScheduledPosts as api_ideas_manage_listScheduledPosts,
    rejectIdea as api_ideas_manage_rejectIdea,
    updateScheduledPost as api_ideas_manage_updateScheduledPost
} from "~backend/ideas/manage";

export namespace ideas {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.approveDraft = this.approveDraft.bind(this)
            this.approveIdea = this.approveIdea.bind(this)
            this.cancelScheduledPost = this.cancelScheduledPost.bind(this)
            this.createFeedSource = this.createFeedSource.bind(this)
            this.deleteFeedSource = this.deleteFeedSource.bind(this)
            this.getIdeaPlatforms = this.getIdeaPlatforms.bind(this)
            this.ingestIdea = this.ingestIdea.bind(this)
            this.listDrafts = this.listDrafts.bind(this)
            this.listFeedSources = this.listFeedSources.bind(this)
            this.listIdeas = this.listIdeas.bind(this)
            this.listScheduledPosts = this.listScheduledPosts.bind(this)
            this.rejectIdea = this.rejectIdea.bind(this)
            this.scrapeFeedSource = this.scrapeFeedSource.bind(this)
            this.updateFeedSource = this.updateFeedSource.bind(this)
            this.updateScheduledPost = this.updateScheduledPost.bind(this)
        }

        /**
         * Approves a draft and schedules it for publishing.
         */
        public async approveDraft(params: RequestType<typeof api_ideas_drafts_approveDraft>): Promise<ResponseType<typeof api_ideas_drafts_approveDraft>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                scheduledAt: params.scheduledAt,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/drafts/${encodeURIComponent(params.id)}/approve`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_drafts_approveDraft>
        }

        /**
         * Approves an idea and creates platform-specific drafts.
         */
        public async approveIdea(params: RequestType<typeof api_ideas_manage_approveIdea>): Promise<ResponseType<typeof api_ideas_manage_approveIdea>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                imageMode: params.imageMode,
                platforms: params.platforms,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/${encodeURIComponent(params.id)}/approve`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_approveIdea>
        }

        /**
         * Cancel a scheduled post
         */
        public async cancelScheduledPost(params: { id: number }): Promise<ResponseType<typeof api_ideas_manage_cancelScheduledPost>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/scheduled/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_cancelScheduledPost>
        }

        /**
         * Creates a new feed source
         */
        public async createFeedSource(params: RequestType<typeof api_ideas_feeds_createFeedSource>): Promise<ResponseType<typeof api_ideas_feeds_createFeedSource>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/feeds`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_feeds_createFeedSource>
        }

        /**
         * Deletes a feed source
         */
        public async deleteFeedSource(params: { id: number }): Promise<ResponseType<typeof api_ideas_feeds_deleteFeedSource>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/feeds/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_feeds_deleteFeedSource>
        }

        /**
         * Gets existing platform selections for an idea
         */
        public async getIdeaPlatforms(params: { id: number }): Promise<ResponseType<typeof api_ideas_manage_getIdeaPlatforms>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/${encodeURIComponent(params.id)}/platforms`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_getIdeaPlatforms>
        }

        /**
         * Ingests a new idea from URL or text and generates a summary.
         */
        public async ingestIdea(params: RequestType<typeof api_ideas_ingest_ingestIdea>): Promise<ResponseType<typeof api_ideas_ingest_ingestIdea>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/ingest`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_ingest_ingestIdea>
        }

        /**
         * Retrieves platform drafts filtered by status and platform.
         */
        public async listDrafts(params: RequestType<typeof api_ideas_drafts_listDrafts>): Promise<ResponseType<typeof api_ideas_drafts_listDrafts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:    params.limit === undefined ? undefined : String(params.limit),
                offset:   params.offset === undefined ? undefined : String(params.offset),
                platform: params.platform,
                status:   params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/drafts`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_drafts_listDrafts>
        }

        /**
         * Lists all feed sources
         */
        public async listFeedSources(params: RequestType<typeof api_ideas_feeds_listFeedSources>): Promise<ResponseType<typeof api_ideas_feeds_listFeedSources>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                active: params.active === undefined ? undefined : String(params.active),
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/feeds`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_feeds_listFeedSources>
        }

        /**
         * Retrieves ideas filtered by status.
         */
        public async listIdeas(params: RequestType<typeof api_ideas_manage_listIdeas>): Promise<ResponseType<typeof api_ideas_manage_listIdeas>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
                status: params.status,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_listIdeas>
        }

        /**
         * Get all scheduled posts grouped by platform
         */
        public async listScheduledPosts(): Promise<ResponseType<typeof api_ideas_manage_listScheduledPosts>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/scheduled`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_listScheduledPosts>
        }

        /**
         * Rejects an idea
         */
        public async rejectIdea(params: { id: number }): Promise<ResponseType<typeof api_ideas_manage_rejectIdea>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/${encodeURIComponent(params.id)}/reject`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_rejectIdea>
        }

        /**
         * Manually triggers scraping of a specific feed source
         */
        public async scrapeFeedSource(params: { id: number }): Promise<ResponseType<typeof api_ideas_feeds_scrapeFeedSource>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/feeds/${encodeURIComponent(params.id)}/scrape`, {method: "POST", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_feeds_scrapeFeedSource>
        }

        /**
         * Updates a feed source
         */
        public async updateFeedSource(params: RequestType<typeof api_ideas_feeds_updateFeedSource>): Promise<ResponseType<typeof api_ideas_feeds_updateFeedSource>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                isActive: params.isActive,
                name:     params.name,
                url:      params.url,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/feeds/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_feeds_updateFeedSource>
        }

        /**
         * Update a scheduled post (reschedule or edit content)
         */
        public async updateScheduledPost(params: RequestType<typeof api_ideas_manage_updateScheduledPost>): Promise<ResponseType<typeof api_ideas_manage_updateScheduledPost>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                draftContent: params.draftContent,
                scheduledAt:  params.scheduledAt,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/ideas/scheduled/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_ideas_manage_updateScheduledPost>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    addLessonToCourse as api_lms_courses_addLessonToCourse,
    createCourse as api_lms_courses_createCourse,
    deleteCourse as api_lms_courses_deleteCourse,
    getCourse as api_lms_courses_getCourse,
    getCourseLessons as api_lms_courses_getCourseLessons,
    listCourses as api_lms_courses_listCourses,
    removeLessonFromCourse as api_lms_courses_removeLessonFromCourse,
    updateCourse as api_lms_courses_updateCourse
} from "~backend/lms/courses";
import {
    addCourseToPath as api_lms_learning_paths_addCourseToPath,
    createPath as api_lms_learning_paths_createPath,
    deletePath as api_lms_learning_paths_deletePath,
    getPath as api_lms_learning_paths_getPath,
    getPathCourses as api_lms_learning_paths_getPathCourses,
    listPaths as api_lms_learning_paths_listPaths,
    removeCourseFromPath as api_lms_learning_paths_removeCourseFromPath,
    updatePath as api_lms_learning_paths_updatePath
} from "~backend/lms/learning_paths";
import {
    createLesson as api_lms_lessons_createLesson,
    deleteLesson as api_lms_lessons_deleteLesson,
    getLesson as api_lms_lessons_getLesson,
    listLessons as api_lms_lessons_listLessons,
    updateLesson as api_lms_lessons_updateLesson
} from "~backend/lms/lessons";

export namespace lms {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.addCourseToPath = this.addCourseToPath.bind(this)
            this.addLessonToCourse = this.addLessonToCourse.bind(this)
            this.createCourse = this.createCourse.bind(this)
            this.createLesson = this.createLesson.bind(this)
            this.createPath = this.createPath.bind(this)
            this.deleteCourse = this.deleteCourse.bind(this)
            this.deleteLesson = this.deleteLesson.bind(this)
            this.deletePath = this.deletePath.bind(this)
            this.getCourse = this.getCourse.bind(this)
            this.getCourseLessons = this.getCourseLessons.bind(this)
            this.getLesson = this.getLesson.bind(this)
            this.getPath = this.getPath.bind(this)
            this.getPathCourses = this.getPathCourses.bind(this)
            this.listCourses = this.listCourses.bind(this)
            this.listLessons = this.listLessons.bind(this)
            this.listPaths = this.listPaths.bind(this)
            this.removeCourseFromPath = this.removeCourseFromPath.bind(this)
            this.removeLessonFromCourse = this.removeLessonFromCourse.bind(this)
            this.updateCourse = this.updateCourse.bind(this)
            this.updateLesson = this.updateLesson.bind(this)
            this.updatePath = this.updatePath.bind(this)
        }

        public async addCourseToPath(params: RequestType<typeof api_lms_learning_paths_addCourseToPath>): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/paths/add-course`, {method: "POST", body: JSON.stringify(params)})
        }

        public async addLessonToCourse(params: RequestType<typeof api_lms_courses_addLessonToCourse>): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/courses/add-lesson`, {method: "POST", body: JSON.stringify(params)})
        }

        public async createCourse(params: RequestType<typeof api_lms_courses_createCourse>): Promise<ResponseType<typeof api_lms_courses_createCourse>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/courses`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_courses_createCourse>
        }

        public async createLesson(params: RequestType<typeof api_lms_lessons_createLesson>): Promise<ResponseType<typeof api_lms_lessons_createLesson>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/lessons`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_lessons_createLesson>
        }

        public async createPath(params: RequestType<typeof api_lms_learning_paths_createPath>): Promise<ResponseType<typeof api_lms_learning_paths_createPath>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/paths`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_learning_paths_createPath>
        }

        public async deleteCourse(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/courses/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async deleteLesson(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/lessons/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async deletePath(params: { id: number }): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/paths/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
        }

        public async getCourse(params: { id: number }): Promise<ResponseType<typeof api_lms_courses_getCourse>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/courses/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_courses_getCourse>
        }

        public async getCourseLessons(params: { courseId: number }): Promise<ResponseType<typeof api_lms_courses_getCourseLessons>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/courses/${encodeURIComponent(params.courseId)}/lessons`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_courses_getCourseLessons>
        }

        public async getLesson(params: { id: number }): Promise<ResponseType<typeof api_lms_lessons_getLesson>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/lessons/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_lessons_getLesson>
        }

        public async getPath(params: { id: number }): Promise<ResponseType<typeof api_lms_learning_paths_getPath>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/paths/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_learning_paths_getPath>
        }

        public async getPathCourses(params: { pathId: number }): Promise<ResponseType<typeof api_lms_learning_paths_getPathCourses>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/paths/${encodeURIComponent(params.pathId)}/courses`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_learning_paths_getPathCourses>
        }

        public async listCourses(): Promise<ResponseType<typeof api_lms_courses_listCourses>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/courses`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_courses_listCourses>
        }

        public async listLessons(): Promise<ResponseType<typeof api_lms_lessons_listLessons>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/lessons`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_lessons_listLessons>
        }

        public async listPaths(): Promise<ResponseType<typeof api_lms_learning_paths_listPaths>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/paths`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_learning_paths_listPaths>
        }

        public async removeCourseFromPath(params: RequestType<typeof api_lms_learning_paths_removeCourseFromPath>): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/paths/remove-course`, {method: "POST", body: JSON.stringify(params)})
        }

        public async removeLessonFromCourse(params: RequestType<typeof api_lms_courses_removeLessonFromCourse>): Promise<void> {
            await this.baseClient.callTypedAPI(`/lms/courses/remove-lesson`, {method: "POST", body: JSON.stringify(params)})
        }

        public async updateCourse(params: RequestType<typeof api_lms_courses_updateCourse>): Promise<ResponseType<typeof api_lms_courses_updateCourse>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                coverImageUrl:   params.coverImageUrl,
                description:     params.description,
                difficultyLevel: params.difficultyLevel,
                estimatedHours:  params.estimatedHours,
                isPublished:     params.isPublished,
                sortOrder:       params.sortOrder,
                title:           params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/courses/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_courses_updateCourse>
        }

        public async updateLesson(params: RequestType<typeof api_lms_lessons_updateLesson>): Promise<ResponseType<typeof api_lms_lessons_updateLesson>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                content:         params.content,
                description:     params.description,
                durationMinutes: params.durationMinutes,
                isPublished:     params.isPublished,
                lessonType:      params.lessonType,
                sortOrder:       params.sortOrder,
                title:           params.title,
                videoUrl:        params.videoUrl,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/lessons/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_lessons_updateLesson>
        }

        public async updatePath(params: RequestType<typeof api_lms_learning_paths_updatePath>): Promise<ResponseType<typeof api_lms_learning_paths_updatePath>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                coverImageUrl:   params.coverImageUrl,
                description:     params.description,
                difficultyLevel: params.difficultyLevel,
                estimatedHours:  params.estimatedHours,
                isPublished:     params.isPublished,
                sortOrder:       params.sortOrder,
                title:           params.title,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/lms/paths/${encodeURIComponent(params.id)}`, {method: "PUT", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_lms_learning_paths_updatePath>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    deleteStyleGuide as api_style_guides_manage_deleteStyleGuide,
    getStyleGuide as api_style_guides_manage_getStyleGuide,
    listStyleGuides as api_style_guides_manage_listStyleGuides,
    saveStyleGuide as api_style_guides_manage_saveStyleGuide
} from "~backend/style-guides/manage";

export namespace style_guides {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.deleteStyleGuide = this.deleteStyleGuide.bind(this)
            this.getStyleGuide = this.getStyleGuide.bind(this)
            this.listStyleGuides = this.listStyleGuides.bind(this)
            this.saveStyleGuide = this.saveStyleGuide.bind(this)
        }

        /**
         * Delete style guide
         */
        public async deleteStyleGuide(params: { platform: string }): Promise<ResponseType<typeof api_style_guides_manage_deleteStyleGuide>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/style-guides/${encodeURIComponent(params.platform)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_style_guides_manage_deleteStyleGuide>
        }

        /**
         * Get style guide by platform
         */
        public async getStyleGuide(params: { platform: string }): Promise<ResponseType<typeof api_style_guides_manage_getStyleGuide>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/style-guides/${encodeURIComponent(params.platform)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_style_guides_manage_getStyleGuide>
        }

        /**
         * Get all style guides
         */
        public async listStyleGuides(): Promise<ResponseType<typeof api_style_guides_manage_listStyleGuides>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/style-guides`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_style_guides_manage_listStyleGuides>
        }

        /**
         * Create or update style guide (upsert)
         */
        public async saveStyleGuide(params: RequestType<typeof api_style_guides_manage_saveStyleGuide>): Promise<ResponseType<typeof api_style_guides_manage_saveStyleGuide>> {
            // Construct the body with only the fields which we want encoded within the body (excluding query string or header fields)
            const body: Record<string, any> = {
                aiPrompt:     params.aiPrompt,
                exampleFiles: params.exampleFiles,
                guidelines:   params.guidelines,
            }

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/style-guides/${encodeURIComponent(params.platform)}`, {method: "POST", body: JSON.stringify(body)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_style_guides_manage_saveStyleGuide>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    confirmUpload as api_uploads_files_confirmUpload,
    deleteFile as api_uploads_files_deleteFile,
    getFile as api_uploads_files_getFile,
    getUploadUrl as api_uploads_files_getUploadUrl,
    listFiles as api_uploads_files_listFiles
} from "~backend/uploads/files";

export namespace uploads {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.confirmUpload = this.confirmUpload.bind(this)
            this.deleteFile = this.deleteFile.bind(this)
            this.getFile = this.getFile.bind(this)
            this.getUploadUrl = this.getUploadUrl.bind(this)
            this.listFiles = this.listFiles.bind(this)
        }

        /**
         * Confirm upload completion and update file size
         */
        public async confirmUpload(params: RequestType<typeof api_uploads_files_confirmUpload>): Promise<ResponseType<typeof api_uploads_files_confirmUpload>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uploads/confirm`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uploads_files_confirmUpload>
        }

        /**
         * Delete a file
         */
        public async deleteFile(params: { id: string }): Promise<ResponseType<typeof api_uploads_files_deleteFile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uploads/${encodeURIComponent(params.id)}`, {method: "DELETE", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uploads_files_deleteFile>
        }

        /**
         * Get file metadata
         */
        public async getFile(params: { id: string }): Promise<ResponseType<typeof api_uploads_files_getFile>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uploads/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uploads_files_getFile>
        }

        /**
         * Get a signed upload URL for client-side uploads
         */
        public async getUploadUrl(params: RequestType<typeof api_uploads_files_getUploadUrl>): Promise<ResponseType<typeof api_uploads_files_getUploadUrl>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uploads/url`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uploads_files_getUploadUrl>
        }

        /**
         * List files by category
         */
        public async listFiles(params: RequestType<typeof api_uploads_files_listFiles>): Promise<ResponseType<typeof api_uploads_files_listFiles>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                category: params.category,
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/uploads`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_uploads_files_listFiles>
        }
    }
}

/**
 * Import the endpoint handlers to derive the types for the client.
 */
import {
    getBlogPost as api_website_blog_getBlogPost,
    listBlogPosts as api_website_blog_listBlogPosts
} from "~backend/website/blog";
import { submitContact as api_website_contact_submitContact } from "~backend/website/contact";
import {
    getProject as api_website_portfolio_getProject,
    listProjects as api_website_portfolio_listProjects
} from "~backend/website/portfolio";
import { listPricing as api_website_pricing_listPricing } from "~backend/website/pricing";

export namespace website {

    export class ServiceClient {
        private baseClient: BaseClient

        constructor(baseClient: BaseClient) {
            this.baseClient = baseClient
            this.getBlogPost = this.getBlogPost.bind(this)
            this.getProject = this.getProject.bind(this)
            this.listBlogPosts = this.listBlogPosts.bind(this)
            this.listPricing = this.listPricing.bind(this)
            this.listProjects = this.listProjects.bind(this)
            this.submitContact = this.submitContact.bind(this)
        }

        /**
         * Retrieves a single blog post by slug.
         */
        public async getBlogPost(params: { slug: string }): Promise<ResponseType<typeof api_website_blog_getBlogPost>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blog/${encodeURIComponent(params.slug)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_website_blog_getBlogPost>
        }

        public async getProject(params: { id: number }): Promise<ResponseType<typeof api_website_portfolio_getProject>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/portfolio/${encodeURIComponent(params.id)}`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_website_portfolio_getProject>
        }

        /**
         * Retrieves published blog posts for the public website.
         */
        public async listBlogPosts(params: RequestType<typeof api_website_blog_listBlogPosts>): Promise<ResponseType<typeof api_website_blog_listBlogPosts>> {
            // Convert our params into the objects we need for the request
            const query = makeRecord<string, string | string[]>({
                limit:  params.limit === undefined ? undefined : String(params.limit),
                offset: params.offset === undefined ? undefined : String(params.offset),
            })

            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/blog`, {query, method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_website_blog_listBlogPosts>
        }

        /**
         * Retrieves all pricing items for the public website.
         */
        public async listPricing(): Promise<ResponseType<typeof api_website_pricing_listPricing>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/pricing`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_website_pricing_listPricing>
        }

        public async listProjects(): Promise<ResponseType<typeof api_website_portfolio_listProjects>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/portfolio`, {method: "GET", body: undefined})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_website_portfolio_listProjects>
        }

        /**
         * Submits a contact form and sends notification email.
         */
        public async submitContact(params: RequestType<typeof api_website_contact_submitContact>): Promise<ResponseType<typeof api_website_contact_submitContact>> {
            // Now make the actual call to the API
            const resp = await this.baseClient.callTypedAPI(`/contact`, {method: "POST", body: JSON.stringify(params)})
            return JSON.parse(await resp.text(), dateReviver) as ResponseType<typeof api_website_contact_submitContact>
        }
    }
}


type PickMethods<Type> = Omit<CallParameters, "method"> & { method?: Type };

// Helper type to omit all fields that are cookies.
type OmitCookie<T> = {
  [K in keyof T as T[K] extends CookieWithOptions<any> ? never : K]: T[K];
};

type RequestType<Type extends (...args: any[]) => any> =
  Parameters<Type> extends [infer H, ...any[]]
    ? OmitCookie<H>
    : void;

type ResponseType<Type extends (...args: any[]) => any> = OmitCookie<Awaited<ReturnType<Type>>>;

function dateReviver(key: string, value: any): any {
  if (
    typeof value === "string" &&
    value.length >= 10 &&
    value.charCodeAt(0) >= 48 && // '0'
    value.charCodeAt(0) <= 57 // '9'
  ) {
    const parsedDate = new Date(value);
    if (!isNaN(parsedDate.getTime())) {
      return parsedDate;
    }
  }
  return value;
}


function encodeQuery(parts: Record<string, string | string[]>): string {
    const pairs: string[] = []
    for (const key in parts) {
        const val = (Array.isArray(parts[key]) ?  parts[key] : [parts[key]]) as string[]
        for (const v of val) {
            pairs.push(`${key}=${encodeURIComponent(v)}`)
        }
    }
    return pairs.join("&")
}

// makeRecord takes a record and strips any undefined values from it,
// and returns the same record with a narrower type.
// @ts-ignore - TS ignore because makeRecord is not always used
function makeRecord<K extends string | number | symbol, V>(record: Record<K, V | undefined>): Record<K, V> {
    for (const key in record) {
        if (record[key] === undefined) {
            delete record[key]
        }
    }
    return record as Record<K, V>
}

import {
  StreamInOutHandlerFn,
  StreamInHandlerFn,
  StreamOutHandlerFn,
} from "encore.dev/api";

type StreamRequest<Type> = Type extends
  | StreamInOutHandlerFn<any, infer Req, any>
  | StreamInHandlerFn<any, infer Req, any>
  | StreamOutHandlerFn<any, any>
  ? Req
  : never;

type StreamResponse<Type> = Type extends
  | StreamInOutHandlerFn<any, any, infer Resp>
  | StreamInHandlerFn<any, any, infer Resp>
  | StreamOutHandlerFn<any, infer Resp>
  ? Resp
  : never;


function encodeWebSocketHeaders(headers: Record<string, string>) {
    // url safe, no pad
    const base64encoded = btoa(JSON.stringify(headers))
      .replaceAll("=", "")
      .replaceAll("+", "-")
      .replaceAll("/", "_");
    return "encore.dev.headers." + base64encoded;
}

class WebSocketConnection {
    public ws: WebSocket;

    private hasUpdateHandlers: (() => void)[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        let protocols = ["encore-ws"];
        if (headers) {
            protocols.push(encodeWebSocketHeaders(headers))
        }

        this.ws = new WebSocket(url, protocols)

        this.on("error", () => {
            this.resolveHasUpdateHandlers();
        });

        this.on("close", () => {
            this.resolveHasUpdateHandlers();
        });
    }

    resolveHasUpdateHandlers() {
        const handlers = this.hasUpdateHandlers;
        this.hasUpdateHandlers = [];

        for (const handler of handlers) {
            handler()
        }
    }

    async hasUpdate() {
        // await until a new message have been received, or the socket is closed
        await new Promise((resolve) => {
            this.hasUpdateHandlers.push(() => resolve(null))
        });
    }

    on(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.addEventListener(type, handler);
    }

    off(type: "error" | "close" | "message" | "open", handler: (event: any) => void) {
        this.ws.removeEventListener(type, handler);
    }

    close() {
        this.ws.close();
    }
}

export class StreamInOut<Request, Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamIn<Response> {
    public socket: WebSocketConnection;
    private buffer: Response[] = [];

    constructor(url: string, headers?: Record<string, string>) {
        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            this.buffer.push(JSON.parse(event.data, dateReviver));
            this.socket.resolveHasUpdateHandlers();
        });
    }

    close() {
        this.socket.close();
    }

    async next(): Promise<Response | undefined> {
        for await (const next of this) return next;
        return undefined;
    }

    async *[Symbol.asyncIterator](): AsyncGenerator<Response, undefined, void> {
        while (true) {
            if (this.buffer.length > 0) {
                yield this.buffer.shift() as Response;
            } else {
                if (this.socket.ws.readyState === WebSocket.CLOSED) return;
                await this.socket.hasUpdate();
            }
        }
    }
}

export class StreamOut<Request, Response> {
    public socket: WebSocketConnection;
    private responseValue: Promise<Response>;

    constructor(url: string, headers?: Record<string, string>) {
        let responseResolver: (_: any) => void;
        this.responseValue = new Promise((resolve) => responseResolver = resolve);

        this.socket = new WebSocketConnection(url, headers);
        this.socket.on("message", (event: any) => {
            responseResolver(JSON.parse(event.data, dateReviver))
        });
    }

    async response(): Promise<Response> {
        return this.responseValue;
    }

    close() {
        this.socket.close();
    }

    async send(msg: Request) {
        if (this.socket.ws.readyState === WebSocket.CONNECTING) {
            // await that the socket is opened
            await new Promise((resolve) => {
                this.socket.ws.addEventListener("open", resolve, { once: true });
            });
        }

        return this.socket.ws.send(JSON.stringify(msg));
    }
}
// CallParameters is the type of the parameters to a method call, but require headers to be a Record type
type CallParameters = Omit<RequestInit, "headers"> & {
    /** Headers to be sent with the request */
    headers?: Record<string, string>

    /** Query parameters to be sent with the request */
    query?: Record<string, string | string[]>
}


// A fetcher is the prototype for the inbuilt Fetch function
export type Fetcher = typeof fetch;

const boundFetch = fetch.bind(this);

class BaseClient {
    readonly baseURL: string
    readonly fetcher: Fetcher
    readonly headers: Record<string, string>
    readonly requestInit: Omit<RequestInit, "headers"> & { headers?: Record<string, string> }

    constructor(baseURL: string, options: ClientOptions) {
        this.baseURL = baseURL
        this.headers = {}

        // Add User-Agent header if the script is running in the server
        // because browsers do not allow setting User-Agent headers to requests
        if (!BROWSER) {
            this.headers["User-Agent"] = "-Generated-TS-Client (Encore/1.50.4)";
        }

        this.requestInit = options.requestInit ?? {};

        // Setup what fetch function we'll be using in the base client
        if (options.fetcher !== undefined) {
            this.fetcher = options.fetcher
        } else {
            this.fetcher = boundFetch
        }
    }

    async getAuthData(): Promise<CallParameters | undefined> {
        return undefined;
    }

    // createStreamInOut sets up a stream to a streaming API endpoint.
    async createStreamInOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamInOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamInOut(this.baseURL + path + queryString, headers);
    }

    // createStreamIn sets up a stream to a streaming API endpoint.
    async createStreamIn<Response>(path: string, params?: CallParameters): Promise<StreamIn<Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamIn(this.baseURL + path + queryString, headers);
    }

    // createStreamOut sets up a stream to a streaming API endpoint.
    async createStreamOut<Request, Response>(path: string, params?: CallParameters): Promise<StreamOut<Request, Response>> {
        let { query, headers } = params ?? {};

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                headers = {...headers, ...authData.headers};
            }
        }

        const queryString = query ? '?' + encodeQuery(query) : ''
        return new StreamOut(this.baseURL + path + queryString, headers);
    }

    // callTypedAPI makes an API call, defaulting content type to "application/json"
    public async callTypedAPI(path: string, params?: CallParameters): Promise<Response> {
        return this.callAPI(path, {
            ...params,
            headers: { "Content-Type": "application/json", ...params?.headers }
        });
    }

    // callAPI is used by each generated API method to actually make the request
    public async callAPI(path: string, params?: CallParameters): Promise<Response> {
        let { query, headers, ...rest } = params ?? {}
        const init = {
            ...this.requestInit,
            ...rest,
        }

        // Merge our headers with any predefined headers
        init.headers = {...this.headers, ...init.headers, ...headers}

        // Fetch auth data if there is any
        const authData = await this.getAuthData();

        // If we now have authentication data, add it to the request
        if (authData) {
            if (authData.query) {
                query = {...query, ...authData.query};
            }
            if (authData.headers) {
                init.headers = {...init.headers, ...authData.headers};
            }
        }

        // Make the actual request
        const queryString = query ? '?' + encodeQuery(query) : ''
        const response = await this.fetcher(this.baseURL+path+queryString, init)

        // handle any error responses
        if (!response.ok) {
            // try and get the error message from the response body
            let body: APIErrorResponse = { code: ErrCode.Unknown, message: `request failed: status ${response.status}` }

            // if we can get the structured error we should, otherwise give a best effort
            try {
                const text = await response.text()

                try {
                    const jsonBody = JSON.parse(text)
                    if (isAPIErrorResponse(jsonBody)) {
                        body = jsonBody
                    } else {
                        body.message += ": " + JSON.stringify(jsonBody)
                    }
                } catch {
                    body.message += ": " + text
                }
            } catch (e) {
                // otherwise we just append the text to the error message
                body.message += ": " + String(e)
            }

            throw new APIError(response.status, body)
        }

        return response
    }
}

/**
 * APIErrorDetails represents the response from an Encore API in the case of an error
 */
interface APIErrorResponse {
    code: ErrCode
    message: string
    details?: any
}

function isAPIErrorResponse(err: any): err is APIErrorResponse {
    return (
        err !== undefined && err !== null &&
        isErrCode(err.code) &&
        typeof(err.message) === "string" &&
        (err.details === undefined || err.details === null || typeof(err.details) === "object")
    )
}

function isErrCode(code: any): code is ErrCode {
    return code !== undefined && Object.values(ErrCode).includes(code)
}

/**
 * APIError represents a structured error as returned from an Encore application.
 */
export class APIError extends Error {
    /**
     * The HTTP status code associated with the error.
     */
    public readonly status: number

    /**
     * The Encore error code
     */
    public readonly code: ErrCode

    /**
     * The error details
     */
    public readonly details?: any

    constructor(status: number, response: APIErrorResponse) {
        // extending errors causes issues after you construct them, unless you apply the following fixes
        super(response.message);

        // set error name as constructor name, make it not enumerable to keep native Error behavior
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target#new.target_in_constructors
        Object.defineProperty(this, 'name', {
            value:        'APIError',
            enumerable:   false,
            configurable: true,
        })

        // fix the prototype chain
        if ((Object as any).setPrototypeOf == undefined) {
            (this as any).__proto__ = APIError.prototype
        } else {
            Object.setPrototypeOf(this, APIError.prototype);
        }

        // capture a stack trace
        if ((Error as any).captureStackTrace !== undefined) {
            (Error as any).captureStackTrace(this, this.constructor);
        }

        this.status = status
        this.code = response.code
        this.details = response.details
    }
}

/**
 * Typeguard allowing use of an APIError's fields'
 */
export function isAPIError(err: any): err is APIError {
    return err instanceof APIError;
}

export enum ErrCode {
    /**
     * OK indicates the operation was successful.
     */
    OK = "ok",

    /**
     * Canceled indicates the operation was canceled (typically by the caller).
     *
     * Encore will generate this error code when cancellation is requested.
     */
    Canceled = "canceled",

    /**
     * Unknown error. An example of where this error may be returned is
     * if a Status value received from another address space belongs to
     * an error-space that is not known in this address space. Also
     * errors raised by APIs that do not return enough error information
     * may be converted to this error.
     *
     * Encore will generate this error code in the above two mentioned cases.
     */
    Unknown = "unknown",

    /**
     * InvalidArgument indicates client specified an invalid argument.
     * Note that this differs from FailedPrecondition. It indicates arguments
     * that are problematic regardless of the state of the system
     * (e.g., a malformed file name).
     *
     * This error code will not be generated by the gRPC framework.
     */
    InvalidArgument = "invalid_argument",

    /**
     * DeadlineExceeded means operation expired before completion.
     * For operations that change the state of the system, this error may be
     * returned even if the operation has completed successfully. For
     * example, a successful response from a server could have been delayed
     * long enough for the deadline to expire.
     *
     * The gRPC framework will generate this error code when the deadline is
     * exceeded.
     */
    DeadlineExceeded = "deadline_exceeded",

    /**
     * NotFound means some requested entity (e.g., file or directory) was
     * not found.
     *
     * This error code will not be generated by the gRPC framework.
     */
    NotFound = "not_found",

    /**
     * AlreadyExists means an attempt to create an entity failed because one
     * already exists.
     *
     * This error code will not be generated by the gRPC framework.
     */
    AlreadyExists = "already_exists",

    /**
     * PermissionDenied indicates the caller does not have permission to
     * execute the specified operation. It must not be used for rejections
     * caused by exhausting some resource (use ResourceExhausted
     * instead for those errors). It must not be
     * used if the caller cannot be identified (use Unauthenticated
     * instead for those errors).
     *
     * This error code will not be generated by the gRPC core framework,
     * but expect authentication middleware to use it.
     */
    PermissionDenied = "permission_denied",

    /**
     * ResourceExhausted indicates some resource has been exhausted, perhaps
     * a per-user quota, or perhaps the entire file system is out of space.
     *
     * This error code will be generated by the gRPC framework in
     * out-of-memory and server overload situations, or when a message is
     * larger than the configured maximum size.
     */
    ResourceExhausted = "resource_exhausted",

    /**
     * FailedPrecondition indicates operation was rejected because the
     * system is not in a state required for the operation's execution.
     * For example, directory to be deleted may be non-empty, an rmdir
     * operation is applied to a non-directory, etc.
     *
     * A litmus test that may help a service implementor in deciding
     * between FailedPrecondition, Aborted, and Unavailable:
     *  (a) Use Unavailable if the client can retry just the failing call.
     *  (b) Use Aborted if the client should retry at a higher-level
     *      (e.g., restarting a read-modify-write sequence).
     *  (c) Use FailedPrecondition if the client should not retry until
     *      the system state has been explicitly fixed. E.g., if an "rmdir"
     *      fails because the directory is non-empty, FailedPrecondition
     *      should be returned since the client should not retry unless
     *      they have first fixed up the directory by deleting files from it.
     *  (d) Use FailedPrecondition if the client performs conditional
     *      REST Get/Update/Delete on a resource and the resource on the
     *      server does not match the condition. E.g., conflicting
     *      read-modify-write on the same resource.
     *
     * This error code will not be generated by the gRPC framework.
     */
    FailedPrecondition = "failed_precondition",

    /**
     * Aborted indicates the operation was aborted, typically due to a
     * concurrency issue like sequencer check failures, transaction aborts,
     * etc.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     */
    Aborted = "aborted",

    /**
     * OutOfRange means operation was attempted past the valid range.
     * E.g., seeking or reading past end of file.
     *
     * Unlike InvalidArgument, this error indicates a problem that may
     * be fixed if the system state changes. For example, a 32-bit file
     * system will generate InvalidArgument if asked to read at an
     * offset that is not in the range [0,2^32-1], but it will generate
     * OutOfRange if asked to read from an offset past the current
     * file size.
     *
     * There is a fair bit of overlap between FailedPrecondition and
     * OutOfRange. We recommend using OutOfRange (the more specific
     * error) when it applies so that callers who are iterating through
     * a space can easily look for an OutOfRange error to detect when
     * they are done.
     *
     * This error code will not be generated by the gRPC framework.
     */
    OutOfRange = "out_of_range",

    /**
     * Unimplemented indicates operation is not implemented or not
     * supported/enabled in this service.
     *
     * This error code will be generated by the gRPC framework. Most
     * commonly, you will see this error code when a method implementation
     * is missing on the server. It can also be generated for unknown
     * compression algorithms or a disagreement as to whether an RPC should
     * be streaming.
     */
    Unimplemented = "unimplemented",

    /**
     * Internal errors. Means some invariants expected by underlying
     * system has been broken. If you see one of these errors,
     * something is very broken.
     *
     * This error code will be generated by the gRPC framework in several
     * internal error conditions.
     */
    Internal = "internal",

    /**
     * Unavailable indicates the service is currently unavailable.
     * This is a most likely a transient condition and may be corrected
     * by retrying with a backoff. Note that it is not always safe to retry
     * non-idempotent operations.
     *
     * See litmus test above for deciding between FailedPrecondition,
     * Aborted, and Unavailable.
     *
     * This error code will be generated by the gRPC framework during
     * abrupt shutdown of a server process or network connection.
     */
    Unavailable = "unavailable",

    /**
     * DataLoss indicates unrecoverable data loss or corruption.
     *
     * This error code will not be generated by the gRPC framework.
     */
    DataLoss = "data_loss",

    /**
     * Unauthenticated indicates the request does not have valid
     * authentication credentials for the operation.
     *
     * The gRPC framework will generate this error code when the
     * authentication metadata is invalid or a Credentials callback fails,
     * but also expect authentication middleware to generate it.
     */
    Unauthenticated = "unauthenticated",
}

export default new Client(import.meta.env.VITE_CLIENT_TARGET, { requestInit: { credentials: "include" } });
